<!-- Our HTML -->
<!-- Print a table of parameters for the module specified in mod -->
<script>
  // Create a structure of registered datasets organized by identifier -- this will make retrieval below much more efficient
  var registeredDataLayersByTag = {};    // Indexed by tag
  var registeredDataLayersById  = {};    // Indexed by datasetId

  <%= raw @datasets.reject{ |d| d.finalized == false }            # Only show datasets marked as finalized
               .reject{ |d| d.city_id != @current_city.id }       # Only show datasets for current city
               .map{ |d| d.dataset_tags.map { |t| 
                  "if(!registeredDataLayersByTag['" + t.tag + "']) registeredDataLayersByTag['" + t.tag + "'] = [];" + 
                  "registeredDataLayersByTag['" + t.tag + "'].push({" +
                            "identifier:'" + d.identifier + "'," +
                            "datasetId:"   + d.id.to_s() + "," +
                            "serverUrl:'"  + d.server_url.gsub('\\') { '\\\\' } + "'" +
                          "});\n" +
                          "registeredDataLayersById[" + d.id.to_s() + "] = " +
                                "registeredDataLayersByTag['" + t.tag + "'][length - 1];\n"
                    } }
                .join('') %>

  var datasets = {};
  <%= raw @datasets.reject{ |d| d.finalized == false && d.alive == false }
               .map{ |d| 'datasets[' + d.id.to_s() + '] = ' + d.to_json + ";\n" }
               .join('') %>     


  // datasets[684] = {"abstract":"This a demo data set of urban landuse in the Ludwigsburg city","alive":true,"city_id":3,"created_at":"2013-05-22T10:04:56Z","dataserver_id":9,"dataset_type":null,"finalized":true,"id":684,"identifier":"LB_urban_landuse","last_seen":"2013-05-22T10:04:56Z","published":false,"server_url":"http://services.iguess.tudor.lu/cgi-bin/mapserv?map=/var/www/MapFiles/LB_localOWS_test.map","service":"WFS","title":"LB urban landuse","updated_at":"2013-05-22T10:04:56Z"};               


  var updateHiddenFields = function(parameterIdentifier, dataset)  // Note that dataset can be undefined
  {
    $('#hidden-field-' + parameterIdentifier + '-srs')        .val('<%= @current_city.srs %>');
    $('#hidden-field-' + parameterIdentifier + '-dformat')    .val(dataset ? dataset.format       : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-left')  .val(dataset ? dataset.bbox_left    : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-right') .val(dataset ? dataset.bbox_right   : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-top')   .val(dataset ? dataset.bbox_top     : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-bottom').val(dataset ? dataset.bbox_bottom  : "");
    $('#hidden-field-' + parameterIdentifier + '-res-x')      .val(dataset ? dataset.resolution_x : "");
    $('#hidden-field-' + parameterIdentifier + '-res-y')      .val(dataset ? dataset.resolution_y : "");
  };


  // modeName will be "input" or "output"
  var createDatasetSelectionControls = function(parameterIdentifier, modeName)
  {
    var ctrl = $(document.createElement('select'))
            .attr('name', 'datasets[' + parameterIdentifier + ']')
            .attr('id', parameterIdentifier + modeName);

    // Make sure we have at least an empty list for this identifier
    if(!registeredDataLayersByTag[parameterIdentifier])
      registeredDataLayersByTag[parameterIdentifier] = [];

    for(var i = 0, len = registeredDataLayersByTag[parameterIdentifier].length; i < len; i++) {
      var title = 'Unknown Title';  

      // Here we create our dropdown of possible datasets.  All datasets presented have already been registered with the server.
      // Note that the value here will be the id of this layer as stored in the database on the server.
      var datasetId = registeredDataLayersByTag[parameterIdentifier][i].datasetId;


      var dataset = datasets[datasetId];

      // If we already know the title of this one, insert it now
      if(dataset) 
        title = dataset.title || dataset.identifier;

      if(id) 
        ctrl.append('<option class="dataset-title-' + datasetId + '" value="' + datasetId + '">' + title + '</option>');
    }


    ctrl.change(function() {
      if(datasets[+this.value]) {   // The "+" coerces this.value into a number
        updateHiddenFields(parameterIdentifier, datasets[+this.value]);
      }
    });

    return [ ctrl,
             $('<input>').attr('type','hidden')
                        .attr('name', 'srs['          + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-srs')
                        .val('<%= @current_city.srs %>'),
             $('<input>').attr('type','hidden')
                        .attr('name', 'dformat['      + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-dformat')
                        .val(dataset ? dataset.format : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-left['    + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-left')
                        .val(dataset ? dataset.bbox_left : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-right['   + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-right')
                        .val(dataset ? dataset.bbox_right : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-top['     + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-top')
                        .val(dataset ? dataset.bbox_top : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-bottom['  + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-bottom')
                        .val(dataset ? dataset.bbox_bottom : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'res-x['        + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-res-x')
                        .val(dataset ? dataset.resolution_x : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'res-y['        + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-res-y')
                        .val(dataset ? dataset.resolution_y : ""),
           ];                             
  };


  var anyDatasetsMissing = false;

  // formValues & datasetValues will only be defined when calling from the main Module Configuration page
  // When mode is output, datasetValues will be undefined
  // items is a list of input/output requirements the module has
  // isInput will be true for input table, false for output table
  var populateTable = function(items, isInput, formValues, datasetValues)
  {
    var itemCount = items.length;
    var modeName = isInput ? 'input' : 'output';

    // Find the exsiting table called input-table or output-table
    var table = $('#' + modeName + '-table');

    if(itemCount == 0) {
      if(isInput) 
        table.html("<span class='no-inputs-ouputs'>This module configuration requires no inputs.</span>");
      else 
        table.html("<span class='no-inputs-ouputs'>This module configuration produces no outputs.</span>");
    }
    else {

      table.empty();

      var text       = isInput ? "Selected Dataset or Value" : "Output Dataset Identifier";
      var extraField = isInput ? "<th class='center'>Parameter Tag</th>"    : "";

      table.append("<tr><th>Parameter Name</th>" + extraField + "<th class='center'>" + text + "</th></tr>");


      for(var i = 0; i < itemCount; i++)
      {
        var row = $(document.createElement("tr"));

        item = items[i];   

        // Item looks like this:
        // "abstract":"Field of type INTEGER specifying a time delay in miliseconds.",
        // "alive":true,
        // "datatype":"float",
        // "id":123,
        // "identifier":"delay",
        // "is_input":true,
        // "last_seen":"2013-04-08T15:12:04Z",
        // "title":"Time delay in miliseconds.",
        // "wps_process_id":4


        // Parameter Name column
        var cell = $(document.createElement('td'));

        cell.append(item.title ? item.title : item.identifier);

        if(item.abstract != undefined && item.abstract != '') {
          cell.append('<img src="/assets/small_question_mark.gif" class="info-icon" ' +
                      'alt="More info" title="' + item.abstract + '">');
        }

        row.append(cell);

        if(isInput) {
          row.append("<td align='center'>[" + item.identifier + "]</td>");
        }

        // Parameter Value column
        cell = $(document.createElement('td'));   // Dataset
        cell.attr("nowrap", true);

        // Complex input
        if(isInput && item.datatype == 'ComplexData') {      // Dropdown showing existing datasets of proper type
          var controls = createDatasetSelectionControls(item.identifier, modeName);

          control = controls[0];
          control.attr('class', 'disableable');

          if(control.children().length == 0) {
              cell.text('No registered datasets of type "' + item.identifier + '"');
              cell.append('<img src="/assets/small_question_mark.gif" class="info-icon" ' +
                  'alt="More info" title="Don\'t panic!  You can register new datasets in the Data Manager when you are done here.">');
              anyDatasetsMissing = true;
          }
          else {
            control.prepend("<option value=-1>No dataset selected</option>");
            control.change(onSelectedDatasetChanged);
            control.attr('class', 'req-select disableable');

            cell.html(control);

            if(datasetValues && datasetValues[item.identifier])
              control.val(datasetValues[item.identifier]);
            else 
              control.val(-1);
          }

          // Add any other (hidden) controls returned by createDatasetSelectionControls()
          for(var j = 1, len = controls.length; j < len; j++) 
            cell.append(controls[j]);
        }

        // Simple output
        else if(!isInput && item.datatype != "ComplexData") {    // No input required, just display of value

          var value = (formValues == undefined) ? "" : formValues[item.identifier + modeName];

          if(value) 
            cell.append('<b>' + value + '</b>');
          else 
            cell.append('<i>Will be computed</i>');
        }

        // Simple input or complex output -- we'll need to show a text field here
        else {    

          var className = isInput ? "input-field" : "output-field";
          var value = (formValues == undefined) ? "" : formValues[item.identifier + modeName];
          var placeholder = isInput ? item.datatype.capitalize() + " value" : "Output dataset name";

          cell.html('<input type="text" name="' + modeName + '[' + item.identifier + ']" placeholder="' + placeholder + '" ' +
                           'value="' + value + '" class="' + className + ' disableable" onchange="onInputOutputTextEntryChanged()">');
        }

        row.append(cell);
        table.append(row);

      }
    }
  };

 </script>
